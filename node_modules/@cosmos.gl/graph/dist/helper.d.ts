import { default as regl } from 'regl';
import { default as DOMPurify } from 'dompurify';
export declare const isFunction: <T>(a: T) => boolean;
export declare const isArray: <T>(a: unknown | T[]) => a is T[];
export declare const isObject: <T>(a: T) => boolean;
export declare const isAClassInstance: <T>(a: T) => boolean;
export declare const isPlainObject: <T>(a: T) => boolean;
export declare function getRgbaColor(value: string | [number, number, number, number]): [number, number, number, number];
export declare function rgbToBrightness(r: number, g: number, b: number): number;
export declare function readPixels(reglInstance: regl.Regl, fbo: regl.Framebuffer2D): Float32Array;
export declare function clamp(num: number, min: number, max: number): number;
export declare function isNumber(value: number | undefined | null | typeof NaN): boolean;
/**
 * Sanitizes HTML content to prevent XSS attacks using DOMPurify
 *
 * This function is used internally to sanitize HTML content before setting innerHTML,
 * such as in attribution text. It uses a safe default configuration that allows
 * only common safe HTML elements and attributes.
 *
 * @param html The HTML string to sanitize
 * @param options Optional DOMPurify configuration options to override defaults
 * @returns Sanitized HTML string safe for innerHTML usage
 */
export declare function sanitizeHtml(html: string, options?: DOMPurify.Config): string;
