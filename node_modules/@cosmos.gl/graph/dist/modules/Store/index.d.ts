import { mat3 } from 'gl-matrix';
import { GraphConfigInterface } from '../../config';
export declare const ALPHA_MIN = 0.001;
export declare const MAX_POINT_SIZE = 64;
/**
 * Maximum number of executions to delay before performing hover detection.
 * This threshold prevents excessive hover detection calls for performance optimization.
 * The `findHoveredItem` method will skip actual detection until this count is reached.
 */
export declare const MAX_HOVER_DETECTION_DELAY = 4;
export type Hovered = {
    index: number;
    position: [number, number];
};
type Focused = {
    index: number;
};
export declare class Store {
    pointsTextureSize: number;
    linksTextureSize: number;
    alpha: number;
    transform: mat3;
    screenSize: [number, number];
    mousePosition: number[];
    screenMousePosition: number[];
    selectedArea: number[][];
    isSimulationRunning: boolean;
    simulationProgress: number;
    selectedIndices: Float32Array | null;
    maxPointSize: number;
    hoveredPoint: Hovered | undefined;
    focusedPoint: Focused | undefined;
    draggingPointIndex: number | undefined;
    hoveredLinkIndex: number | undefined;
    adjustedSpaceSize: number;
    isSpaceKeyPressed: boolean;
    div: HTMLDivElement | undefined;
    webglMaxTextureSize: number;
    hoveredPointRingColor: number[];
    focusedPointRingColor: number[];
    hoveredLinkColor: number[];
    greyoutPointColor: number[];
    isDarkenGreyout: boolean;
    isLinkHoveringEnabled: boolean;
    private alphaTarget;
    private scalePointX;
    private scalePointY;
    private random;
    private _backgroundColor;
    get backgroundColor(): [number, number, number, number];
    set backgroundColor(color: [number, number, number, number]);
    addRandomSeed(seed: number | string): void;
    getRandomFloat(min: number, max: number): number;
    /**
     * If the config parameter `spaceSize` exceeds the limits of WebGL,
     * it reduces the space size without changing the config parameter.
     */
    adjustSpaceSize(configSpaceSize: number, webglMaxTextureSize: number): void;
    /**
     * Sets the WebGL texture size limit for use in atlas creation and other texture operations.
     */
    setWebGLMaxTextureSize(webglMaxTextureSize: number): void;
    updateScreenSize(width: number, height: number): void;
    scaleX(x: number): number;
    scaleY(y: number): number;
    setHoveredPointRingColor(color: string | [number, number, number, number]): void;
    setFocusedPointRingColor(color: string | [number, number, number, number]): void;
    setGreyoutPointColor(color: string | [number, number, number, number] | undefined): void;
    updateLinkHoveringEnabled(config: Pick<GraphConfigInterface, 'onLinkClick' | 'onLinkMouseOver' | 'onLinkMouseOut'>): void;
    setHoveredLinkColor(color?: string | [number, number, number, number]): void;
    setFocusedPoint(index?: number): void;
    addAlpha(decay: number): number;
    private alphaDecay;
}
export {};
